@page
@model SK.WebAdmin.Areas.Location.Pages.Schedule.ScheduleDetailModel
@{
    var apiUrl = WebAdmin.Settings.Instance.ApiUrl;
}

@section head{
    <!-- Select2 -->
    <link rel="stylesheet" href="/plugins/select2/css/select2.min.css">
    <link rel="stylesheet" href="/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css">
    <!-- fullCalendar -->
    <link rel="stylesheet" href="/plugins/fullcalendar/main.min.css">
    <link rel="stylesheet" href="/plugins/fullcalendar-daygrid/main.min.css">
    <link rel="stylesheet" href="/plugins/fullcalendar-timegrid/main.min.css">
    <link rel="stylesheet" href="/plugins/fullcalendar-bootstrap/main.min.css">
    <!-- iCheck for checkboxes and radio inputs -->
    <link rel="stylesheet" href="/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
    <!-- Daterange picker -->
    <link rel="stylesheet" href="/plugins/daterangepicker/daterangepicker.css">
    <style>
        .fc-timeGrid-view .fc-day-grid .fc-row {
            min-height: 2em;
        }

            .fc-timeGrid-view .fc-day-grid .fc-row .fc-content-skeleton {
                padding-bottom: 0;
            }

        .fc-axis {
            width: 60px !important;
            position: relative;
        }

            .fc-axis span {
                position: absolute;
                top: 0;
                left: 5px;
            }

        .fc-time-grid .fc-slats .fc-minor td {
            border-top-style: none;
        }
    </style>
    <style id="dynamic-style">
        .fc-time-grid .fc-slats td {
            height: 0.15em;
        }
    </style>
}
<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>@Model.Info.Title</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="@Routing.DASHBOARD">Hệ thống</a></li>
                    <li class="breadcrumb-item"><a href="@Routing.LOCATION_DASHBOARD.LocId(Model.LocId)">Trung tâm</a></li>
                    <li class="breadcrumb-item"><a href="@Routing.LOCATION_SCHEDULE.LocId(Model.LocId)">Lịch phát</a></li>
                    <li class="breadcrumb-item">
                        <a href="@Routing.LOCATION_SCHEDULE_DETAIL.LocId(Model.LocId).Id(Model.ScheduleId)">
                            Chi tiết lịch phát
                        </a>
                    </li>
                    <li class="breadcrumb-item active">@Model.Info.Title</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-9">
                <div class="card card-default">
                    <div class="card-body p-0">
                        <div class="card-header pb-0 mb-0 border-bottom-0">
                            <h4 class="float-left">
                                Lịch tuần
                            </h4>
                            <button class="btn btn-sm btn-default float-right ml-3"
                                    data-toggle="modal" data-target="#modal-info">
                                Hướng dẫn &nbsp;<i class="fas fa-info-circle"></i>
                            </button>
                            <div class="d-inline-block float-right mx-2 pt-1" style="width: 100px">
                                <input step="10" onchange="changeZoom()" value="0"
                                       type="range" class="custom-range d-inline" id="zoom-range">
                            </div>
                            <span class="float-right">
                                Phóng to
                            </span>
                        </div>
                        <!-- THE CALENDAR -->
                        <div id="calendar"></div>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- /.col -->
            <div class="col-md-3">
                <div class="sticky-top mb-3">

                    <div class="card card-default">
                        <div class="card-header">
                            <h4 class="card-title">Danh sách cấu hình</h4>
                        </div>
                        <div class="card-body">
                            <!-- the events -->
                            <div id="configs-container">
                            </div>
                        </div>
                        <!-- /.card-body -->
                    </div>
                    <!-- /.card -->
                    <div class="card card-default">
                        <div class="card-header">
                            <h3 class="card-title">Khoảng thời gian</h3>
                        </div>
                        <form role="form" id="form-main">
                            <div class="card-body">
                                <div class="form-group">
                                    <label>Tên</label>
                                    <input type="text" class="form-control" name="name">
                                </div>
                                <div class="form-group">
                                    <label>Mặc định</label>&nbsp;
                                    <div class="form-check icheck-primary d-inline">
                                        <input type="checkbox" value="true" name="is_default" id="cb-is-default">
                                        <label for="cb-is-default"></label>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>Từ ngày - đến trước ngày</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">
                                                <i class="far fa-calendar-alt"></i>
                                            </span>
                                        </div>
                                        <input type="text" class="form-control float-right" name="start_end_date_str">
                                    </div>
                                    <!-- /.input group -->
                                </div>

                            </div>
                            <!-- /.card-body -->
                        </form>
                    </div>
                    <div class="card card-default">
                        <div class="card-header">
                            <h3 class="card-title">Thao tác</h3>
                        </div>
                        <div class="card-body">
                            <button class="btn btn-primary" onclick="validateForm()">
                                Lưu lại
                            </button>
                        </div>
                    </div>

                </div>
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
    </div>
</section>

<div class="modal fade" id="modal-info">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Hướng dẫn sử dụng</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul>
                    <li>
                        Không được thiết lập các cấu hình <b>trùng nhau</b> trong 1 khoảng thời gian.
                    </li>
                    <li>
                        Kéo và thả ra khỏi khu vực tấm lịch để <b>xóa</b> 1 phần tử đang có trên lịch.
                    </li>
                </ul>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@section scripts{
    <!-- Select2 -->
    <script src="/plugins/select2/js/select2.full.min.js"></script>
    <!-- jquery-validation -->
    <script src="/plugins/jquery-validation/jquery.validate.min.js"></script>
    <script src="/plugins/jquery-validation/additional-methods.min.js"></script>
    <!-- fullcalendar -->
    <script src="/plugins/moment/moment.min.js"></script>
    <script src="/plugins/fullcalendar/main.min.js"></script>
    <script src="/plugins/fullcalendar-daygrid/main.min.js"></script>
    <script src="/plugins/fullcalendar-timegrid/main.min.js"></script>
    <script src="/plugins/fullcalendar-interaction/main.min.js"></script>
    <script src="/plugins/fullcalendar-bootstrap/main.min.js"></script>
    <!-- daterangepicker -->
    <!--<script src="/plugins/moment/moment.min.js"></script>-->
    <script src="/plugins/daterangepicker/daterangepicker.js"></script>
    <script type="text/javascript">
        var loadConfigFunc;
        var color = [
            ['#28a745', 'white', 'bg-success'],
            ['#ffc107', 'black', 'bg-warning'],
            ['#17a2b8', 'white', 'bg-info'],
            ['#dc3545', 'white', 'bg-danger'],
            ['#007bff', 'white', 'bg-primary']
        ];
        var configs = {};
        $(document).ready(function () {
            $('[name=start_end_date_str]').daterangepicker({
                locale: {
                    format: 'DD/MM/YYYY'
                }
            });
            $('[name=is_default]').change((e) => {
                const checked = $('[name=is_default]:checked').length;
                if (checked)
                    $('[name=start_end_date_str]').attr("disabled", "");
                else
                    $('[name=start_end_date_str]').removeAttr("disabled");
            });
            $('.select2').select2();
            loadConfigFunc = loadConfigs();
            getData();
            $('#form-main').validate({
                submitHandler: confirmSubmit,
                rules: {
                    name: {
                        required: true,
                    },
                },
                messages: {
                    name: {
                        required: "Xin hãy nhập tên khoảng thời gian",
                    },
                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }
            });
        });

        function changeZoom() {
            var val = $('#zoom-range').val();
            h = 0.15 * (parseInt(val / 10) + 1);
            $('#dynamic-style').text('.fc-time-grid .fc-slats td { height: ' + h + 'em; }');
            calendar.destroy();
            calendar.render();
        }

        function loadConfigs() {
            const data = {};
            data.culture = '@CultureHelper.CurrentLang';
            data.load_all = true;
            data.loc_id = @Model.LocId;
            data.fields = '@ConfigQueryProjection.SELECT';
            return $.ajax({
                url: '@apiUrl/@ApiEndpoint.CONFIG_API',
                type: 'get',
                data: data,
                success: (data) => {
                    console.log(data);
                    data = data.results[0].data.results;
                    var configContainer = $('#configs-container');
                    for (var i = 0; i < data.length; i++) {
                        data[i].color = color[i % 5];
                        configs[data[i].id] = data[i];
                        configContainer.append(
                            $('<div config="' + data[i].id + '" class="external-event ' + data[i].color[2] + '">').append(
                                data[i].name
                            )
                        );
                    }
                },
                error: (data) => {
                    handleGeneralError(data);
                },
                complete: () => {
                    changeLoading(false);
                }
            });
        }

        function renderWeekConfigs(result) {
            var date = new Date();
            var d = date.getDate(),
                m = date.getMonth(),
                y = date.getFullYear(),
                dow = date.getDay();

            for (var i = 0; i < result.length; i++) {
                var startDayDiff = result[i].from_day_of_week - dow;
                var endDayDiff = result[i].to_day_of_week - dow;
                var cf = configs[result[i].config_id];

                var startTime = result[i].from_time.split(':');
                var endTime = null;
                if (!result[i].all_day) {
                    endTime = result[i].to_time.split(':');
                }

                var ev = {
                    title: cf.name,
                    start: new Date(y, m, d + startDayDiff, startTime[0], startTime[1]),
                    end: endTime? new Date(y, m, d + endDayDiff, endTime[0], endTime[1]) : null,
                    allDay: result[i].all_day,
                    backgroundColor: configs[result[i].config_id].color[0],
                    borderColor: configs[result[i].config_id].color[0],
                    textColor: configs[result[i].config_id].color[1],
                    extendedProps: {
                        config: result[i].config_id
                    },
                };
                calendar.addEvent(ev);
            }

        }

        function getData() {
            changeLoading(true);
            $.ajax({
                url: '@apiUrl/@ApiEndpoint.SCHEDULE_DETAIL_API',
                type: 'get',
                data: {
                    id: @Model.Id,
                    culture: '@CultureHelper.CurrentLang',
                    fields: '@ScheduleDetailQueryProjection.INFO,@ScheduleDetailQueryProjection.SCHEDULE,' +
                        '@ScheduleDetailQueryProjection.CONFIGS',
                    single_only: true
                },
                success: (data) => {
                    console.log(data);
                    data = data.results[0].data;
                    processData(data);
                },
                error: (data) => {
                    handleGeneralError(data, '@Routing.LOCATION_SCHEDULE.LocId(Model.LocId)');
                },
                complete: () => {
                    changeLoading(false);
                }
            });
        }

        async function processData(data) {
            const formMain = $('#form-main');
            $(".schedule-name").text(data.schedule.name);
            if (!data.is_default) {
                $("[name=start_end_date_str]").data('daterangepicker').setStartDate(data.from_time.display);
                $("[name=start_end_date_str]").data('daterangepicker').setEndDate(data.to_time.display);
            }
            else {
                $("[name=start_end_date_str]").attr("disabled", "");
                $("[name=is_default]").attr("checked", "");
            }
            $("[name=name]").val(data.name);
            await loadConfigFunc;
            renderWeekConfigs(data.schedule_week_configs);
        }

        function validateForm() {
            $('#form-main').submit();
        }

        function confirmSubmit() {
            confirmAlert().then((result) => {
                if (result.value)
                    submitData();
            });
        }

        function submitData() {
            function getTimeInDay(date) {
                if (!date)
                    return;
                var hour = date.getHours();
                var minute = date.getMinutes();
                return {
                    time: hour + ':' + minute + ':00',
                    dow: date.getDay()
                };
            }

            var date = $('[name=start_end_date_str]').val();
            var name = $('[name=name]').val();
            var isDefault = $('[name=is_default]:checked').length > 0;
            var events = calendar.getEvents();
            var model = {
                name: name,
                is_default: isDefault,
                start_end_date_str: date,
                week_configs: []
            };
            for (var i = 0; i < events.length; i++) {
                var endTime = null;
                var startTime = getTimeInDay(events[i].start);
                if (!events[i].allDay) {
                    endTime = getTimeInDay(events[i].end);
                }
                var configModel = {};
                configModel.from_day_of_week = startTime.dow;
                configModel.to_day_of_week = endTime ? endTime.dow : null;
                configModel.from_time = startTime.time;
                configModel.to_time = endTime ? endTime.time : null;
                configModel.config_id = events[i].extendedProps.config;
                configModel.all_day = events[i].allDay
                model.week_configs.push(configModel);
            }

            //ajax
            console.log(model);
            $.ajax({
                url: '@apiUrl/@ApiEndpoint.SCHEDULE_DETAIL_API/@Model.Id',
                type: 'patch',
                contentType: 'application/json',
                data: JSON.stringify(model),
                success: (data) => {
                    successAlert("@Html.Raw(GeneralMessage.UPDATE_SUCCESS)")
                        .then(() => location.reload());
                },
                error: (data) => {
                    handleGeneralError(data);
                },
                complete: () => {
                    changeLoading(false);
                }
            });
        }
    </script>

    <script>
        var calendar;
        $(function () {

            /* initialize the external events
             -----------------------------------------------------------------*/
            function ini_events(ele) {
                ele.each(function () {

                    // create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
                    // it doesn't need to have a start or end
                    var eventObject = {
                        title: $.trim($(this).text()) // use the element's text as the event title
                    }

                    // store the Event Object in the DOM element so we can get to it later
                    $(this).data('eventObject', eventObject)

                    // make the event draggable using jQuery UI
                    $(this).draggable({
                        zIndex: 1070,
                        revert: true, // will cause the event to go back to its
                        revertDuration: 0  //  original position after the drag
                    })

                })
            }

            ini_events($('#configs-container div.external-event'))

            /* initialize the calendar
             -----------------------------------------------------------------*/
            //Date for the calendar events (dummy data)
            var date = new Date()
            var d = date.getDate(),
                m = date.getMonth(),
                y = date.getFullYear()

            var Calendar = FullCalendar.Calendar;
            var Draggable = FullCalendarInteraction.Draggable;

            var containerEl = document.getElementById('configs-container');
            var checkbox = document.getElementById('drop-remove');
            var calendarEl = document.getElementById('calendar');

            // initialize the external events
            // -----------------------------------------------------------------

            new Draggable(containerEl, {
                itemSelector: '.external-event',
                eventData: function (eventEl) {
                    console.log(eventEl);
                    return {
                        title: eventEl.innerText,
                        backgroundColor: window.getComputedStyle(eventEl, null).getPropertyValue('background-color'),
                        borderColor: window.getComputedStyle(eventEl, null).getPropertyValue('background-color'),
                        textColor: window.getComputedStyle(eventEl, null).getPropertyValue('color'),
                    };
                }
            });

            var now = new Date();
            var sunDiff = 0 - now.getDay();
            var nextSunDiff = 7 - now.getDay();
            var sun = new Date(now.getYear() + 1900, now.getMonth(), now.getDate() + sunDiff + 1).toISOString();
            var nextSun = new Date(now.getYear() + 1900, now.getMonth(), now.getDate() + nextSunDiff + 1).toISOString();
            sun = sun.substr(0, sun.indexOf('T'));
            nextSun = nextSun.substr(0, nextSun.indexOf('T'));

            calendar = new Calendar(calendarEl, {
                validRange: {
                    start: sun,
                    end: nextSun,
                },
                locale: "en-GB",
                dragRevertDuration: 0,
                plugins: ['bootstrap', 'interaction', 'dayGrid', 'timeGrid'],
                allDayText: 'Cả ngày',
                eventReceive: (info) => {
                    var draggedEl = $(info.draggedEl);
                    var configId = draggedEl.attr('config');
                    var ev = info.event;
                    ev.setExtendedProp('config', configId);
                    if (!ev.allDay)
                        ev.setEnd(ev.start.setHours(ev.start.getHours() + 1));
                    console.log(ev);
                },
                eventDragStop: (info) => {
                    var element = $(info.el);
                    console.log(info);
                    var jsEv = info.jsEvent;
                    var eles = document.elementsFromPoint(jsEv.x, jsEv.y) // x, y
                    if (eles.indexOf(calendarEl) < 0) {
                        element.hide();
                        Swal.fire({
                            title: 'Xác nhận',
                            text: "Bạn chắc chắn muốn xóa",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Chắc chắn'
                        }).then((result) => {
                            if (result.value) {
                                info.event.remove();
                            } else {
                                element.show();
                            }
                        });

                    }
                },
                eventTimeFormat: { // like '14:30'
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                },
                eventOverlap: false,
                header: false,
                defaultView: 'timeGridWeek',
                slotDuration: '00:05',
                slotLabelInterval: '02:00',
                contentHeight: 'auto',
                slotLabelFormat: {
                    hour12: false,
                    hour: 'numeric',
                    minute: '2-digit',
                    omitZeroMinute: false,
                    meridiem: 'short'
                },
                columnHeaderFormat: { weekday: 'long' },
                editable: true,
                droppable: true, // this allows things to be dropped onto the calendar !!!
            });
            calendar.render();
        });
    </script>
}
