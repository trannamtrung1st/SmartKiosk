@page
@model SK.WebAdmin.Areas.Location.Pages.Post.CreateModel
@{
    var apiUrl = WebAdmin.Settings.Instance.ApiUrl;
}

@section head {
    <!-- Select2 -->
    <link rel="stylesheet" href="/plugins/select2/css/select2.min.css">
    <link rel="stylesheet" href="/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css">
    <!-- DataTables -->
    <link rel="stylesheet" href="/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <!-- summernote -->
    <link rel="stylesheet" href="/plugins/summernote/summernote-bs4.css">
    <!-- ElFinder -->
    <link rel="stylesheet" href="~/plugins/jquery-ui/themes/base/theme.min.css" />
    <link rel="stylesheet" href="~/plugins/jquery-ui/themes/base/jquery-ui.min.css" />
    <link rel="stylesheet" href="~/plugins/elfinder/css/elfinder.full.min.css" />
    <link rel="stylesheet" href="~/plugins/elfinder/css/theme.min.css" /> @* <-- NOTE: This file is new and some of the themes may not look quite right if this is used. *@
    <link rel="stylesheet" href="~/dist/css/elfinder/themes/material/css/theme-gray.min.css" id="elfinder-theme" />
    <style>
        .summernote {
        }

        .note-editable.card-block {
            height: 500px;
        }

        .elfinder-cwd table td {
            /* fix conflict with Bootstrap CSS. See: https://github.com/Studio-42/elFinder/commit/4f858d5ffc9a8f41b4cc07a063782abe2e722bdf */
            box-sizing: content-box;
        }
    </style>

}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>@Model.Info.Title</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="@Routing.DASHBOARD">Hệ thống</a></li>
                    <li class="breadcrumb-item"><a href="@Routing.LOCATION_DASHBOARD.LocId(Model.LocId)">Trung tâm</a></li>
                    <li class="breadcrumb-item"><a href="@Routing.LOCATION_POST.LocId(Model.LocId)">Bài viết</a></li>
                    <li class="breadcrumb-item active">@Model.Info.Title</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <!-- left column -->
            <div class="col-md-12">
                <!-- jquery validation -->
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fa fa-info-circle mr-1"></i>
                            Thông tin
                        </h3>
                    </div>
                    <!-- /.card-header -->
                    <div class="card-body mb-0 pb-0">
                        <form role="form" id="form-main">
                            <div class="form-group w-50">
                                <label>
                                    Hình ảnh
                                    <button type="button"
                                            onclick="showFileChooser('image')"
                                            class="btn btn-default mx-1 btn-sm">
                                        <i class="fa fa-folder-open"></i>
                                    </button>
                                </label>
                                <input type="text" name="image" class="form-control"
                                       onchange="onImageUrlChange('image')"
                                       placeholder="Đường dẫn hình ảnh" />
                                <img name="image_preview" class="img w-100 my-3" />
                            </div>
                            <hr />
                            <div class="form-group w-50">
                                <label>Thuộc loại</label>
                                <select class="form-control select2" name="type">
                                    @{
                                        var types = TNT.Core.Helpers.General.EnumExtension.GetValues<SK.Data.PostType>();
                                        foreach (var t in types)
                                        {
                                            <option value="@((int)t)">@TNT.Core.Helpers.General.EnumExtension.DisplayName(t)</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="form-group w-50">
                                <label>Thuộc đối tác</label>
                                <select class="form-control select2" name="owner_id">
                                    <!option value="">Chưa chọn</!option>
                                </select>
                            </div>
                            <hr />
                            <div class="form-group w-50">
                                <label>Ngôn ngữ</label>
                                @{
                                    var supportCultures = Business.Settings.Instance.SupportedCultures;
                                }
                                <select class="form-control select2" name="language">
                                    @foreach (var culture in supportCultures)
                                    {
                                        var langCode = culture.TwoLetterISOLanguageName;
                                        <!option value="@langCode" @PageHelper.SelectedIfActiveLang(langCode)>
                                            @culture.DisplayName
                                        </!option>
                                    }
                                </select>
                            </div>
                        </form>
                    </div>
                    <!-- form start -->
                    <form role="form" id="form-content">
                        <div class="card-body mt-0 pt-0">
                            <div class="form-group">
                                <label>Tiêu đề</label>
                                <input type="text" name="title" class="form-control" placeholder="Nhập tiêu đề">
                            </div>
                            <div class="form-group">
                                <label>Mô tả</label>
                                <textarea class="form-control"
                                          name="description"
                                          placeholder="Nhập nội dung ở đây"></textarea>
                            </div>
                            <div class="form-group">
                                <label>Nội dung</label>
                                <textarea class="summernote"
                                          name="content"
                                          placeholder="Nhập nội dung ở đây"></textarea>
                            </div>
                        </div>
                        <!-- /.card-body -->
                        <div class="card-footer">
                            <button type="button" onclick="validateForm()" class="btn btn-primary">
                                <i class="fa fa-check mr-1"></i>
                                GỬI ĐI
                            </button>
                        </div>
                    </form>
                </div>
                <!-- /.card -->
            </div>
            <!--/.col (left) -->
        </div>
        <!-- /.row -->
    </div><!-- /.container-fluid -->
</section>
<!-- /.content -->
<partial name="FileChooserModal" />

@section scripts {

    <!-- jquery-validation -->
    <script src="/plugins/jquery-validation/jquery.validate.min.js"></script>
    <script src="/plugins/jquery-validation/additional-methods.min.js"></script>
    <!-- Select2 -->
    <script src="/plugins/select2/js/select2.full.min.js"></script>
    <!-- Summernote -->
    <script src="/plugins/summernote/summernote-bs4.min.js"></script>
    <!-- ElFinder -->
    <script src="~/plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/plugins/elfinder/js/elfinder.full.min.js"></script>
    <partial name="FileChooserScript" />
    <script type="text/javascript">
        const tempData = {
            lang: '@CultureHelper.CurrentLang',
            model: {
                image: {},
                contents: {}
            },
        };
        $(document).ready(function () {
            loadOwners();
            // Summernote
            $('.summernote[name=content]').summernote({
                fontSizes: ['12', '14', '16', '18', '24', '36', '48', '56', '64', '72', '80', '88', '96'],
                toolbar: [
                    ['style', ['style']],
                    ['fontsize', ['fontsize']],
                    ['font', ['bold', 'italic', 'underline', 'clear']],
                    ['fontname', ['fontname']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['height', ['height']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'hr', 'video']],
                    ['view', ['fullscreen', 'codeview']],
                    ['help', ['help']]
                ],
            });
            $('.select2').select2();
            jQuery.validator.setDefaults({ ignore: ":hidden:not(#summernote),.note-editable.card-block" });
            const validatorOptions = {
                submitHandler: validateForm,
                rules: {
                    title: {
                        required: true,
                    }
                },
                messages: {
                    title: {
                        required: "Xin hãy nhập tiêu đề",
                    }
                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }
            };
            $('#form-content').validate(validatorOptions);
            validatorOptions.rules = {
                owner_id: {
                    required: true,
                },
            };
            validatorOptions.messages = {
                owner_id: {
                    required: "Xin hãy chọn 1 đối tác",
                },
            };
            $('#form-main').validate(validatorOptions);
            $('#form-main select[name=language]').change(onLanguageChange);
            initElFinder();
        });

        function validateForm() {
            const mainValid = $('#form-main').validate().form();
            const contentValid = $('#form-content').validate().form();
            if (!mainValid)
                $('#form-main').submit();
            else if (!contentValid)
                $('#form-content').submit();
            else confirmSubmit();
        }

        function loadOwners() {
            var sl = $('[name=owner_id]');
            const data = {};
            data.culture = '@CultureHelper.CurrentLang';
            data.load_all = true;
            data.fields = '@OwnerQueryProjection.SELECT';
            $.ajax({
                url: '@apiUrl/@ApiEndpoint.OWNER_API',
                type: 'get',
                data: data,
                success: (data) => {
                    console.log(data);
                    data = data.results[0].data.results;
                    for (var i = 0; i < data.length; i++) {
                        sl.append(
                            $('<option value="' + data[i].id + '">').append(data[i].name)
                        );
                    }
                },
                error: (data) => {
                    handleGeneralError(data);
                },
                complete: () => {
                    changeLoading(false);
                }
            });
        }

        function initElFinder() {
            var myCommands = elFinder.prototype._options.commands;
            var disabled = ['callback', 'chmod', 'editor', 'netmount', 'ping', 'search', 'zipdl', 'help']; // Not yet implemented commands in elFinder.NetCore
            elFinder.prototype.i18.en.messages.TextArea = "Edit";
            $.each(disabled, function (i, cmd) {
                (idx = $.inArray(cmd, myCommands)) !== -1 && myCommands.splice(idx, 1);
            });
            var options = {
                url: '@WebAdmin.Settings.Instance.ApiUrl/@ApiEndpoint.FILE_API/connector', // Default (Local File System)
                //url: '/el-finder/azure-storage/connector', // Microsoft Azure Connector
                @*//customData: { folder: '@Model.Folder', subFolder: '@Model.SubFolder' }, // customData passed in every request to the connector as query strings. These values are used in FileController's Index method.*@
                rememberLastDir: false, // Prevent elFinder saving in the Browser LocalStorage the last visited directory
                commands: myCommands,
                //lang: 'pt_BR', // elFinder supports UI and messages localization. Check the folder Content\elfinder\js\i18n for all available languages. Be sure to include the corresponding .js file(s) in the JavaScript bundle.
                uiOptions: { // UI buttons available to the user
                    toolbar: [
                        ['back', 'forward'],
                        ['reload'],
                        ['home', 'up'],
                        ['mkdir', 'mkfile', 'upload'],
                        ['open', 'download'],
                        ['undo', 'redo'],
                        ['info'],
                        ['quicklook'],
                        ['copy', 'cut', 'paste'],
                        ['rm'],
                        ['duplicate', 'rename', 'edit'],
                        ['selectall', 'selectnone', 'selectinvert'],
                        ['view', 'sort']
                    ]
                },
                customHeaders: {
                    'Authorization': 'Bearer ' + localStorage.access_token
                },
                handlers: {
                    dblclick: (e, fm) => {
                        const hash = e.data.file;
                        const file = fm.file(hash);
                        console.log(file);
                        if (file.mime != 'directory') {
                            e.preventDefault();
                            const url = fm.url(hash);
                            const tag = fileChooserData.tag;
                            tempData.model[tag] = { ef_hash: hash };
                            $('#form-main [name=' + tag + ']').val(url).trigger('change');
                            closeFileChooser();
                        }
                    },
                },
                onlyMimes: ['image'],
                //lang: 'vi', // Change language
            };
            $('#elfinder').elfinder(options).elfinder('instance');
        }

        function onImageUrlChange(type) {
            const url = $('[name=' + type + ']').val();
            tempData.model[type] = { url };
            if (url?.trim()) {
                const imgPreview = $('[name=' + type + '_preview]');
                imgPreview.attr('src', url);
            }
        }

        function onLanguageChange() {
            const newLang = $('[name=language]').val();
            saveChanges();
            const data = getContentByLang(newLang) ?? {};
            processData(data);
            switchLang(newLang);
        }

        function getContentByLang(lang) {
            return tempData.model.contents[lang];
        }

        function saveChanges() {
            const lang = tempData.lang;
            const model = tempData.model;
            const content = tempData.model.contents[lang] ?? {
                lang
            };
            model.type = $('[name=type]').val();
            model.location_id = @Model.LocId;
            model.owner_id = $('[name=owner_id]').val();
            //content
            content.title = $('[name=title]').val();
            content.description = $('[name=description]').val();
            content.content = $('[name=content]').val();
            model.contents[lang] = content;
        }

        function processData(data) {
            const form = $('#form-content');
            form.find('[name=title]').val(data.title);
            form.find('[name=description]').val(data.description);
            form.find('[name=content]').summernote('code', data.content ?? null);
        }

        function switchLang(newLang) {
            tempData.lang = newLang;
        }

        function transformModel() {
            const model = tempData.model;
            const contents = model.contents;
            const finalModel = { ...model };
            finalModel.contents = [];
            for (var key in contents) {
                finalModel.contents.push(contents[key]);
            }
            return finalModel;
        }

        function confirmSubmit() {
            confirmAlert().then((result) => {
                if (result.value)
                    submitData();
            });
        }

        function submitData() {
            saveChanges();
            const model = transformModel();
            console.log(model);
            changeLoading(true);
            $.ajax({
                url: '@apiUrl/@ApiEndpoint.POST_API',
                type: 'post',
                contentType: 'application/json',
                data: JSON.stringify(model),
                success: (data) => {
                    successAlert("@Html.Raw(GeneralMessage.CREATE_SUCCESS)").then(() => {
                        location.href = '@Routing.LOCATION_POST.LocId(Model.LocId)';
                    });
                },
                error: (data) => {
                    handleGeneralError(data);
                },
                complete: () => {
                    changeLoading(false);
                }
            });
        }
    </script>
}