// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SK.Data.Models;

namespace SK.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200518133308_RemovePostResource")]
    partial class RemovePostResource
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SK.Data.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "00ffde62-7185-4ece-806a-f26731200061",
                            ConcurrencyStamp = "e577053b0fce-4d01-abdc-f96a0510e369",
                            DisplayName = "Quản lí thiết bị",
                            Name = "DeviceManager",
                            NormalizedName = "DEVICEMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "0a4fdf5e-ba25-4368-94ff-0c7f7c863e38",
                            ConcurrencyStamp = "e8029a352c2f-423d-979b-cd43051c64af",
                            DisplayName = "Quản lí dữ liệu",
                            Name = "DataManager",
                            NormalizedName = "DATAMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "283732614265-4ea2-88da-1cc848f9a373",
                            ConcurrencyStamp = "1d03745d-f1c2-439f-825e-0c53f725fd42",
                            DisplayName = "Thiết bị",
                            Name = "Device",
                            NormalizedName = "DEVICE",
                            RoleType = "Device"
                        },
                        new
                        {
                            Id = "5ebe8c26-b2ba-418a-b6aa-3829209658ed",
                            ConcurrencyStamp = "bace6fcf92d5-4ca5-8ac3-b25dcf824788",
                            DisplayName = "Quản lí tài khoản",
                            Name = "UserManager",
                            NormalizedName = "USERMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "6166b3dc-a14c-43cf-bb55-649c5fbe3641",
                            ConcurrencyStamp = "086bbeee-d406-4259-96e2-9ec7fa613c15",
                            DisplayName = "Quản lí tòa nhà",
                            Name = "BuildingManager",
                            NormalizedName = "BUILDINGMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "95c1365a-d715-42d7-97d6-73f6ce72d0e2",
                            ConcurrencyStamp = "68336549262b-4809-9bf3-7e192a3c107c",
                            DisplayName = "Quản lí địa điểm",
                            Name = "LocationManager",
                            NormalizedName = "LOCATIONMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "9e45c4b2-5d23-4c9e-8a8a-2c2cdbd2cee0",
                            ConcurrencyStamp = "9136a9f2-1a1c-4b10-80ce-62752091dcee",
                            DisplayName = "Quản lí cấu hình",
                            Name = "ConfigManager",
                            NormalizedName = "CONFIGMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "c7a0931d-7177-4b05-8468-0de8f8ed8df5",
                            ConcurrencyStamp = "d52b51a770c6-4e19-8c9c-1b34f1e3d0f4",
                            DisplayName = "Thống kê",
                            Name = "ReportManager",
                            NormalizedName = "REPORTMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "cb63ac9f-c0d5-40b2-b40b-fc633e07cf60",
                            ConcurrencyStamp = "2b321caa-c4da-4c5b-a005-506153a9ef9f",
                            DisplayName = "Quản lí chủ sở hữu",
                            Name = "OwnerManager",
                            NormalizedName = "OWNERMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "ddee2ac5-7074-4b29-9eab-69812970a1db",
                            ConcurrencyStamp = "eaab9c953a81-4e69-9e52-2117f42e59bb",
                            DisplayName = "Quản lí ứng dụng",
                            Name = "AppManager",
                            NormalizedName = "APPMANAGER",
                            RoleType = "User"
                        },
                        new
                        {
                            Id = "f53460d7-6741-4bbe-841a-b561ff43d33c",
                            ConcurrencyStamp = "fc5c8dfab84f-41c7-b8b7-f054bff0d474",
                            DisplayName = "Quản lí lịch phát",
                            Name = "ScheduleManager",
                            NormalizedName = "SCHEDULEMANAGER",
                            RoleType = "User"
                        });
                });

            modelBuilder.Entity("SK.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e1344110c4b-4ba6-b0fa-7b68905c2b40",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAx05XG3wXdmfE+mMJXWXgh19giJfCDi0scE5xY87mx6xHonwEbIHBdBkbli6tpIew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "D6AAM3EXCWDIHEGG3DEWNSKO7LHGCPKJ",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("SK.Data.Models.AppUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "00ffde62-7185-4ece-806a-f26731200061"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "0a4fdf5e-ba25-4368-94ff-0c7f7c863e38"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "5ebe8c26-b2ba-418a-b6aa-3829209658ed"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "6166b3dc-a14c-43cf-bb55-649c5fbe3641"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "95c1365a-d715-42d7-97d6-73f6ce72d0e2"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "9e45c4b2-5d23-4c9e-8a8a-2c2cdbd2cee0"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "c7a0931d-7177-4b05-8468-0de8f8ed8df5"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "cb63ac9f-c0d5-40b2-b40b-fc633e07cf60"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "ddee2ac5-7074-4b29-9eab-69812970a1db"
                        },
                        new
                        {
                            UserId = "b4895be6-a23b-4e4a-b493-f38bc4d504b3",
                            RoleId = "f53460d7-6741-4bbe-841a-b561ff43d33c"
                        });
                });

            modelBuilder.Entity("SK.Data.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SK.Data.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("SK.Data.Models.CategoriesOfResources", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ResourceId")
                        .HasName("PK_CategoriesOfResources");

                    b.HasIndex("ResourceId");

                    b.ToTable("CategoriesOfResources");
                });

            modelBuilder.Entity("SK.Data.Models.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ContactConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("HomeConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("MapConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NotiConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramEventConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSaverPlaylist")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("SK.Data.Models.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AccessToken")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CurrentFcmToken")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("FloorId")
                        .HasColumnType("int");

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<double?>("Lon")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("FloorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("SK.Data.Models.EntityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("EntityCategory");
                });

            modelBuilder.Entity("SK.Data.Models.EntityCategoryContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("EntityCategoryContent");
                });

            modelBuilder.Entity("SK.Data.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FloorPlanSvg")
                        .HasColumnType("ntext")
                        .IsUnicode(true);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocationId");

                    b.ToTable("Floor");
                });

            modelBuilder.Entity("SK.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SK.Data.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("SK.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("VisibleTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("SK.Data.Models.PostContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Lang")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostContent");
                });

            modelBuilder.Entity("SK.Data.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("SK.Data.Models.ResourceContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Lang")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceContent");
                });

            modelBuilder.Entity("SK.Data.Models.ResourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ResourceType");
                });

            modelBuilder.Entity("SK.Data.Models.ResourceTypeContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Lang")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("ResourceTypeContent");
                });

            modelBuilder.Entity("SK.Data.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("SK.Data.Models.ScheduleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDetail");
                });

            modelBuilder.Entity("SK.Data.Models.ScheduleWeekConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllDay")
                        .HasColumnType("bit");

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<int?>("FromDayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<int>("ScheduleDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ToDayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("ScheduleDetailId");

                    b.ToTable("ScheduleWeekConfig");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SK.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SK.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SK.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SK.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.AppUserRole", b =>
                {
                    b.HasOne("SK.Data.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.Area", b =>
                {
                    b.HasOne("SK.Data.Models.Floor", "Floor")
                        .WithMany("Areas")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("FK_Area_Floor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.Location", "Location")
                        .WithMany("Areas")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Area_Location")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.Building", b =>
                {
                    b.HasOne("SK.Data.Models.Location", "Location")
                        .WithMany("Buildings")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Building__Location")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.CategoriesOfResources", b =>
                {
                    b.HasOne("SK.Data.Models.EntityCategory", "Category")
                        .WithMany("CategoriesOfResources")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_COR_Category")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.Resource", "Resource")
                        .WithMany("CategoriesOfResources")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_COR_Resource")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.Config", b =>
                {
                    b.HasOne("SK.Data.Models.Location", "Location")
                        .WithMany("Configs")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Config_Location")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.Device", b =>
                {
                    b.HasOne("SK.Data.Models.Area", "Area")
                        .WithMany("Devices")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Device_Area")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SK.Data.Models.Floor", null)
                        .WithMany("Devices")
                        .HasForeignKey("FloorId");

                    b.HasOne("SK.Data.Models.AppUser", "DeviceAccount")
                        .WithOne("LinkedDevice")
                        .HasForeignKey("SK.Data.Models.Device", "Id")
                        .HasConstraintName("FK_Device_User")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.Location", "Location")
                        .WithMany("Devices")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Device_Location")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SK.Data.Models.Schedule", "Schedule")
                        .WithMany("Devices")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_Device_Schedule");
                });

            modelBuilder.Entity("SK.Data.Models.EntityCategoryContent", b =>
                {
                    b.HasOne("SK.Data.Models.EntityCategory", "EntityCategory")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_ECC_Category")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.Floor", b =>
                {
                    b.HasOne("SK.Data.Models.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_Floor_Building")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.Location", "Location")
                        .WithMany("Floors")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Floor_Location")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.Post", b =>
                {
                    b.HasOne("SK.Data.Models.Location", "Location")
                        .WithMany("Posts")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Post_Location")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.Owner", "Owner")
                        .WithMany("Posts")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Post_Owner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.PostContent", b =>
                {
                    b.HasOne("SK.Data.Models.Post", "Post")
                        .WithMany("Contents")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_PostContent_Post")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.Resource", b =>
                {
                    b.HasOne("SK.Data.Models.Area", "Area")
                        .WithMany("Resources")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Resource_Area")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.Location", "Location")
                        .WithMany("Resources")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Resource_Location")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.Owner", "Owner")
                        .WithMany("Resources")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Resource_Owner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.ResourceType", "ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Resource_ResourceType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.ResourceContent", b =>
                {
                    b.HasOne("SK.Data.Models.Resource", "Resource")
                        .WithMany("Contents")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_ResourceContent_Resource")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.ResourceTypeContent", b =>
                {
                    b.HasOne("SK.Data.Models.ResourceType", "ResourceType")
                        .WithMany("Contents")
                        .HasForeignKey("ResourceTypeId")
                        .HasConstraintName("FK_RTC_ResourceType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.Schedule", b =>
                {
                    b.HasOne("SK.Data.Models.Location", "Location")
                        .WithMany("Schedules")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Schedule_Location")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.ScheduleDetail", b =>
                {
                    b.HasOne("SK.Data.Models.Schedule", "Schedule")
                        .WithMany("ScheduleDetails")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_ScheduleDetail_Schedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SK.Data.Models.ScheduleWeekConfig", b =>
                {
                    b.HasOne("SK.Data.Models.Config", "Config")
                        .WithMany("ScheduleWeekConfigs")
                        .HasForeignKey("ConfigId")
                        .HasConstraintName("FK_SWC_Config")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SK.Data.Models.ScheduleDetail", "ScheduleDetail")
                        .WithMany("ScheduleWeekConfigs")
                        .HasForeignKey("ScheduleDetailId")
                        .HasConstraintName("FK_SWC_ScheduleDetail")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
